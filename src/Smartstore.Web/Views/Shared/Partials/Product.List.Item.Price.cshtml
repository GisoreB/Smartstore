@using Smartstore.Core.Common;
@using Smartstore.Core.Catalog.Pricing;
@using Smartstore.Web.Models.Catalog;

@model ProductSummaryItemModel

@{
    var list = Model.Parent;
    if (!list.ShowPrice || Model.Price == null)
    {
        return;
    }

    var price = Model.Price;
    var isLinesMode = list.ViewMode == ProductSummaryViewMode.List;
    var showPriceSaving = isLinesMode && price.Saving.SavingAmount.HasValue && (price.ShowRetailPriceSaving || price.RegularPrice != null);
    var artPriceClass = "art-price";

    if (price.Saving.HasSaving)
    {
        artPriceClass += " art-price-offer";
    }

    if (price.CallForPrice)
    {
        artPriceClass += " art-price-call";
    }

    async Task RenderComparePrice(ComparePriceModel priceModel)
    {
        <span sm-if="priceModel != null" class="art-compareprice">
            @if (isLinesMode || price.ShowPriceLabel)
            {
                <span class="art-compareprice-label">@(priceModel.Label):</span>
            }
            <span class="art-compareprice-value">@priceModel.Price</span>
        </span>
    }
}

<div class="art-price-block">
    <span class="@artPriceClass">
        <span class="art-finalprice">
            <span sm-if="price.HasCalculation || price.CallForPrice" class="art-price-value">
                @Html.Raw(price.FinalPrice)
            </span>
        </span>

        @* Compare prices *@
        <span sm-if="price.RegularPrice != null || price.RetailPrice != null" class="art-info-group">
            @{ 
                // Regular price
                await RenderComparePrice(price.RegularPrice);

                // Retail price
                if (isLinesMode || price.RegularPrice == null)
                {
                    // Don't render retail price in compact mode if we have a regular price already
                    await RenderComparePrice(price.RetailPrice);
                }
            }

            @* You save *@
            <span sm-if="showPriceSaving" class="art-compareprice">
                <span class="art-compareprice-label">@T("ShoppingCart.ItemYouSave"):</span>
                <span class="art-saving">@price.Saving.SavingAmount.Value</span>
            </span>
        </span>
    </span>

    <div sm-if="list.ShowShippingSurcharge && price.ShippingSurcharge.HasValue" class="art-shipsurcharge">
        @price.ShippingSurcharge.Value
    </div>

    @if (list.ShowBasePrice && price.BasePriceInfo.HasValue())
    {
        <div class="art-pangv" title="@price.BasePriceInfo">
            @Html.Raw(LocalizedValue.FixBrackets(price.BasePriceInfo, WorkContext.WorkingLanguage) ?? "&nbsp;")
        </div>
    }
</div>

<zone name="productbox_add_info" />